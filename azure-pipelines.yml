trigger:
  branches:
    include:
      - main
  paths:
    include:
      - /ConfigMgr.AdminService/ReleaseNotes.txt
    exclude:
      - /.gitignore
      - /readme.md
      - /.tests

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: 'windows-2019'
        steps:
          - task: PowerShell@2
            displayName: Pre-Build
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name msal.ps -Verbose -Scope CurrentUser -SkipPublisherCheck -Force
                Install-Module -Name Az.KeyVault -Verbose -Scope CurrentUser -SkipPublisherCheck -Force
              pwsh: true

          - task: PowerShell@2
            displayName: Build
            inputs:
              filePath: './build.ps1'
              pwsh: true

          - task: CopyFiles@2
            inputs:
              SourceFolder: './bin/release'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              CleanTargetFolder: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'release'
              publishLocation: 'pipeline'

  - stage: Deploy
    jobs:
      - deployment: 'Deploy'
        displayName: 'Publish to PSGallery'
        pool:
          vmImage: 'windows-2019'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: |
                      try {
                        write-host "Publishing module from: $env:Pipeline_Workspace\release\$env:MODULENAME"
                        Publish-Module -Path "$env:Pipeline_Workspace\release\$env:MODULENAME" -NuGetApiKey ${env:APIKEY}
                      }
                      catch {
                        write-warning $_
                      }
                    pwsh: true
                  env:
                    APIKEY: $(APIKEY)